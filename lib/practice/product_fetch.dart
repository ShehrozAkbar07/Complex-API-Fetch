// import 'dart:convert';
// import 'package:flutter/material.dart';
// import "package:http/http.dart" as http;

// import 'mode_practice_api_employee.dart';

// class EmployeeFetch extends StatefulWidget {
//   const EmployeeFetch({Key? key}) : super(key: key);

//   @override
//   State<EmployeeFetch> createState() => _EmployeeFetchState();
// }

// class _EmployeeFetchState extends State<EmployeeFetch> {
//   // List<Autogenerated> postList = [];
//   List<Map<String, dynamic>> employeeData = [];

//   // List<Autogenerated> employeeData = [];

//   // @override
//   // void initState() {
//   //   super.initState();
//   //   employeeData = getPostApi();
//   // }
//   Future<void> getPostApi() async {
//     final responce = await http
//         .get(Uri.parse('https://dummy.restapiexample.com/api/v1/employees'));

//     // print(data);
//     if (responce.statusCode == 200) {
//       var data = jsonDecode(responce.body.toString());
//       // print(data);

//       for (Map<String, dynamic> i in data) {
//         employeeData.add(i);
//         print(employeeData.length);
//         // print('yosuf chutia');
//         // print(model);
//       }
//     } else {
//       // throw Exception('Failed to fetch data');
//     }
//     // for (Map<String, dynamic> i in data) {
//     //   postList.add(Employee.fromJson(i));
//     // }
//     //   return postList;
//     // } else {
//     //   return postList;
//     // }
//   }

//   @override
//   Widget build(BuildContext context) {
//     getPostApi();

//     return Scaffold(
//       body: Column(children: [
//         Expanded(
//           child: FutureBuilder(
//               future: getPostApi(),
//               builder: (context, AsyncSnapshot snapshot) {
//                 if (snapshot.connectionState == ConnectionState.waiting) {
//                   return CircularProgressIndicator(); // Loading indicator
//                 }
//                 // else if (snapshot.hasError) {
//                 //   return Text('Error: ${snapshot.error}');
//                 // }
//                 else {
//                   final List<Map<String, dynamic>> data = snapshot.data;

//                   return ListView.builder(
//                       itemCount: employeeData.length,
//                       itemBuilder: (context, index) {
//                         return Center(
//                           child:
//                               Text(employeeData[index]['message'].toString()),
//                         );
//                       });
//                 }
//               }),
//         )
//       ]),
//     );
//   }
// }

import 'dart:convert';

import 'package:carousel_slider/carousel_slider.dart';
import 'package:flutter/material.dart';
import 'package:flutter_rating_bar/flutter_rating_bar.dart';
import "package:http/http.dart" as http;

class ProductFetch extends StatefulWidget {
  @override
  _ProductFetchState createState() => _ProductFetchState();
}

class _ProductFetchState extends State<ProductFetch> {
  late Future<List<Map<String, dynamic>>> employeeData;

  // @override
  // void initState() {
  //   super.initState();
  //   employeeData =
  //       fetchEmployeeData(); // Assuming fetchEmployeeData returns a Future
  // }

  Future<List<dynamic>> fetchEmployeeData() async {
    final response =
        await http.get(Uri.parse('https://dummyjson.com/products'));

    if (response.statusCode == 200) {
      Map<String, dynamic> jsonData = json.decode(response.body);
      return jsonData['products'];

      // final List<dynamic> data = jsonData['data'];
      // print(data);

      // return List<Map<String, dynamic>>.from(data);
    } else {
      throw Exception('Failed to fetch data');
    }
  }

  @override
  Widget build(BuildContext context) {
    return FutureBuilder<List<dynamic>>(
      future: fetchEmployeeData(),
      builder: (context, snapshot) {
        if (snapshot.connectionState == ConnectionState.waiting) {
          return CircularProgressIndicator(); // Loading indicator
        } else if (snapshot.hasError) {
          return Text('Error: ${snapshot.error}');
        } else if (snapshot.hasData) {
          final List<dynamic> data = snapshot.data!;

          return Scaffold(
            body: Column(children: [
              const SizedBox(
                height: 10,
              ),
              Expanded(
                  child: ListView.builder(
                      itemCount: data.length,
                      itemBuilder: (context, index) {
                        var employee = data[index];
                        List<dynamic> ab = [employee['images'][0]];
                        print(ab);
                        return Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            Padding(
                              padding: EdgeInsets.symmetric(horizontal: 20),
                              child: Container(
                                height: 300,
                                width: double.infinity,
                                decoration: BoxDecoration(
                                  color:
                                      const Color.fromARGB(255, 226, 225, 225),
                                  borderRadius: BorderRadius.circular(15),
                                ),
                                child: Column(
                                  crossAxisAlignment: CrossAxisAlignment.start,
                                  children: [
                                    const SizedBox(
                                      height: 10,
                                    ),
                                    Center(
                                      child: Container(
                                          decoration: BoxDecoration(
                                              borderRadius:
                                                  BorderRadius.circular(10)),
                                          height: 150,
                                          width: 200,
                                          child: CarouselSlider(
                                            options: CarouselOptions(),
                                            items: ab
                                                .map((item) => Container(
                                                      decoration: BoxDecoration(
                                                          borderRadius:
                                                              BorderRadius
                                                                  .circular(
                                                                      10)),
                                                      child: Center(
                                                          child: Image.network(
                                                              item,
                                                              fit: BoxFit
                                                                  .contain,
                                                              width: 1000)),
                                                    ))
                                                .toList(),
                                          )),
                                    ),
                                    const SizedBox(
                                      height: 10,
                                    ),
                                    Align(
                                      alignment: Alignment.centerRight,
                                      child: Padding(
                                        padding: const EdgeInsets.symmetric(
                                            horizontal: 20),
                                        child: RatingBarIndicator(
                                          rating: employee['rating'],
                                          itemBuilder: (context, index) =>
                                              const Icon(
                                            Icons.star,
                                            color: Color.fromARGB(
                                                255, 231, 176, 10),
                                          ),
                                          itemCount: 5,
                                          itemSize: 20.0,
                                          direction: Axis.horizontal,
                                        ),
                                      ),
                                    ),
                                    Padding(
                                      padding: const EdgeInsets.symmetric(
                                          horizontal: 20),
                                      child: Text(
                                        "${employee['title'].toString()}",
                                        style: const TextStyle(
                                          fontSize: 17,
                                          overflow: TextOverflow.ellipsis,
                                          fontWeight: FontWeight.bold,
                                        ),
                                      ),
                                    ),
                                    const SizedBox(
                                      height: 8,
                                    ),
                                    Padding(
                                      padding: const EdgeInsets.symmetric(
                                          horizontal: 20),
                                      child: Text(
                                        "${employee['description'].toString()}",
                                        style: const TextStyle(
                                          overflow: TextOverflow.ellipsis,

                                          fontSize: 13,
                                          // fontWeight: FontWeight.bold,
                                        ),
                                      ),
                                    ),
                                    const SizedBox(
                                      height: 10,
                                    ),
                                    Padding(
                                      padding: const EdgeInsets.symmetric(
                                          horizontal: 20),
                                      child: Row(
                                        mainAxisAlignment:
                                            MainAxisAlignment.spaceBetween,
                                        children: [
                                          Text(
                                            "\$ ${employee['price'].toString()}",
                                            style: const TextStyle(
                                              fontSize: 17,
                                              // color: Colors.red,
                                              fontWeight: FontWeight.bold,
                                            ),
                                          ),
                                          Text(
                                            "${employee['discountPercentage'].toString()} %",
                                            style: const TextStyle(
                                              fontSize: 14,
                                              color: Colors.red,
                                              // fontWeight: FontWeight.bold,
                                            ),
                                          ),
                                        ],
                                      ),
                                    )
                                  ],
                                ),
                              ),
                            ),
                            // Text("Product:${employee['id'].toString()}"),

                            // Text("Product:${employee['title'].toString()}"),
                            // Text(
                            //     "Description:${employee['description'].toString()}"),
                            // Text("Price:${employee['price'].toString()}"),
                            // Text("Brand:${employee['brand'].toString()}"),
                            // Text("Brand:${employee['category'].toString()}"),

                            // Text("Image:${employee['images'].toString()}"),

                            // // Text(
                            // //     "Employe Name:$employee['employee_salary'].toString()"),

                            // Text(
                            //     "Employe Name:${employee['employee_age'].toString()}"),
                            // Text(
                            //     "Employe Age:$employee['employee_age'].toString()"),
                            const SizedBox(
                              height: 20,
                            ),
                            // Text(
                            //     "Employe Name:${employee['employee_age'].toString()}"),
                            // Text(employee['employee_salary'].toString())
                          ],
                        );
                      }))
            ]),
          );
        } else {
          return const Scaffold(
            body: Column(
              children: [Text('No data available')],
            ),
          );
        }
      },
    );
  }

//   final List<Widget> imageSliders = imgList
//       .map((item) => Container(
//             child: Container(
//               margin: EdgeInsets.all(5.0),
//               child: ClipRRect(
//                   borderRadius: BorderRadius.all(Radius.circular(5.0)),
//                   child: Stack(
//                     children: <Widget>[
//                       Image.network(item, fit: BoxFit.cover, width: 1000.0),
//                       Positioned(
//                         bottom: 0.0,
//                         left: 0.0,
//                         right: 0.0,
//                         child: Container(
//                           decoration: BoxDecoration(
//                             gradient: LinearGradient(
//                               colors: [
//                                 Color.fromARGB(200, 0, 0, 0),
//                                 Color.fromARGB(0, 0, 0, 0)
//                               ],
//                               begin: Alignment.bottomCenter,
//                               end: Alignment.topCenter,
//                             ),
//                           ),
//                           padding: EdgeInsets.symmetric(
//                               vertical: 10.0, horizontal: 20.0),
//                           child: Text(
//                             'No. ${imgList.indexOf(item)} image',
//                             style: TextStyle(
//                               color: Colors.white,
//                               fontSize: 20.0,
//                               fontWeight: FontWeight.bold,
//                             ),
//                           ),
//                         ),
//                       ),
//                     ],
//                   )),
//             ),
//           ))
//       .toList();
}
